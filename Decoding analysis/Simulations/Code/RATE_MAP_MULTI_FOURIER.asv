function [rateMap, spacingVec, orientationVec, phaseVec] = RATE_MAP_MULTI_FOURIER(gridFiring_max, gridSpacing, ...
    gridSpacing_variability, arenaSize, gridOrientation, gridOrientation_variability, nNeurons)
%-------------------------------------------------------------------------%
%   This function generate the synthetic (idealized) rate maps via the sum
%   of three two-dimensional sinusoid gratings (as Solstad et al., 2006).
%   Grid orientations and spacings are sampled randomly, according to the
%   variability defined by gridSpacing_variability and
%   gridOrientation_variability. Grid phase is uniformly sampled. 
%
%   Written by WTR 06/05/2023 // Last updated by WTR 03/18/2024
%-------------------------------------------------------------------------%
%% Globals
waveVectors = [1, 0; 1/2, sqrt(3)/2; 1/2, -sqrt(3)/2]; 
arenaResolution = 15; % bins per meter
arenaX = linspace(-(arenaSize(1)/2), (arenaSize(1)/2), arenaSize(1) * arenaResolution);
arenaY = linspace(-(arenaSize(2)/2), (arenaSize(2)/2), arenaSize(2) * arenaResolution);

n_modules = length()

%% Ratemaps
rateMap = zeros(length(arenaX), length(arenaY), nNeurons); 
spacingVec = zeros(1, nNeurons);
orientationVec = zeros(1, nNeurons);
phaseVec = zeros(2, nNeurons);

for nn = 1:nNeurons
    grid_module_id = ceil(nn * length(gridSpacing))

    orientation = normrnd(gridOrientation, gridOrientation_variability) * pi / 180;
    spacing = normrnd(gridSpacing, gridSpacing_variability);
    phase = rand(1, 2) .* arenaSize;

    orientationVec(nn) = orientation;
    spacingVec(nn) = spacing;
    phaseVec(:, nn) = phase;

    R = [cos(orientation), -sin(orientation); sin(orientation), cos(orientation)]; 
    
    for xx = 1:length(arenaX)
        for yy = 1:length(arenaY)
            rateMap(xx, yy, nn) = gridFiring_max * 2/3 * (1/3 * sum(cos(2 * pi / spacing * (R * waveVectors')' * [arenaX(xx) + phase(1); arenaY(yy) + phase(2)])) + 1/2);
        end
    end

end